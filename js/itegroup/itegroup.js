const axios = require('axios');
const fs = require('fs');
const { JSDOM } = require('jsdom');
const iconv = require('iconv-lite');

// –ë–∞–∑–æ–≤—ã–π URL
const baseUrl = 'https://exhibitors-itegroup.exhibitoronlinemanual.com/ru/Exhibitor/ajaxPaginationData';

// –ù–ê–°–¢–†–û–ô–ö–ò
const USE_ANSI_ENCODING = true; // true - ANSI (Windows-1251), false - UTF-8
const TOTAL_COMPANIES_TO_COLLECT = 197; // –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –∫–æ–º–ø–∞–Ω–∏–π –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
const requestParams = {
    page: '0',
    keywords: '',
    keyword_search: '',
    country_id: '',
    event_prod_cat_id: '',
    exb_listed_as: '',
    sortBy: '',
    event_id: '6',
    InitialKey: '',
    ExhibitorDataView: '',
    certificationId: '',
    language: 'ru',
    sub_product: ''
};

// –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–∞
function buildFormData(params) {
    const formData = new URLSearchParams();
    Object.entries(params).forEach(([key, value]) => {
        formData.append(key, value);
    });
    return formData.toString();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏–∏
async function collectCompanyLinks() {
    const companies = [];
    let page = 0;
    let skip = 0;
    const limit = 24;

    console.log(`–°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏–∏ (–≤—Å–µ–≥–æ –Ω—É–∂–Ω–æ: ${TOTAL_COMPANIES_TO_COLLECT})...`);

    while (companies.length < TOTAL_COMPANIES_TO_COLLECT) {
        try {
            console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É (skip: ${skip}, limit: ${limit})...`);
            
            const params = {
                ...requestParams,
                page: String(page),
                skip: String(skip),
                limit: String(limit)
            };

            const response = await axios({
                method: 'post',
                url: baseUrl,
                data: buildFormData(params),
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                    'X-Requested-With': 'XMLHttpRequest',
                    'Referer': 'https://exhibitors-itegroup.exhibitoronlinemanual.com/ru/Exhibitor'
                }
            });

            if (response.status !== 200) {
                throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
            }

            // –ü–∞—Ä—Å–∏–º HTML
            const dom = new JSDOM(response.data);
            const document = dom.window.document;

            // –ò—â–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É .card-body .card-title a
            const companyLinks = document.querySelectorAll('.card-body .card-title a');
            
            if (companyLinks.length === 0) {
                console.log('–ë–æ–ª—å—à–µ –∫–æ–º–ø–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä...');
                break;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –º–∞—Å—Å–∏–≤
            companyLinks.forEach(link => {
                if (companies.length < TOTAL_COMPANIES_TO_COLLECT) {
                    const name = safeToString(link.textContent);
                    const href = safeToString(link.getAttribute('href'));
                    const fullUrl = href ? new URL(href, 'https://exhibitors-itegroup.exhibitoronlinemanual.com').href : '';

                    companies.push({
                        name: name,
                        url: fullUrl,
                        website: '' // –ë—É–¥–µ–º –∑–∞–ø–æ–ª–Ω—è—Ç—å –ø–æ–∑–∂–µ
                    });
                }
            });

            console.log(`–°–æ–±—Ä–∞–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: ${companies.length}/${TOTAL_COMPANIES_TO_COLLECT}`);

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            page++;
            skip += limit;

            // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await delay(1000);

        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${error.message}`);
            break;
        }
    }

    return companies;
}

// –ü–∞—Ä—Å–∏–º —Å–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ .company-info a
async function parseCompanyWebsite(companyUrl) {
    try {
        console.log(`–ü–∞—Ä—Å–∏–º —Å–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏: ${companyUrl}`);
        
        const response = await axios({
            method: 'get',
            url: companyUrl,
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Referer': 'https://exhibitors-itegroup.exhibitoronlinemanual.com/ru/Exhibitor'
            },
            timeout: 10000
        });

        if (response.status !== 200) {
            return '';
        }

        // –ü–∞—Ä—Å–∏–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–º–ø–∞–Ω–∏–∏
        const dom = new JSDOM(response.data);
        const document = dom.window.document;

        // –ò—â–µ–º —Å–∞–π—Ç –≤ .company-info a
        const websiteLink = document.querySelector('.company-info a');
        if (websiteLink) {
            const website = safeToString(websiteLink.getAttribute('href') || websiteLink.textContent);
            return website;
        }

        return '';

    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–∞–π—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏ ${companyUrl}: ${error.message}`);
        return '';
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function parseExhibitors() {
    try {
        console.log('–ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
        console.log(`–ö–æ–¥–∏—Ä–æ–≤–∫–∞: ${USE_ANSI_ENCODING ? 'ANSI (Windows-1251)' : 'UTF-8'}`);
        console.log(`–¶–µ–ª—å: —Å–æ–±—Ä–∞—Ç—å ${TOTAL_COMPANIES_TO_COLLECT} –∫–æ–º–ø–∞–Ω–∏–π\n`);

        // 1. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏–∏
        const companies = await collectCompanyLinks();
        
        console.log(`\n‚úÖ –°–±–æ—Ä —Å—Å—ã–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: ${companies.length} –∫–æ–º–ø–∞–Ω–∏–π`);
        console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π...\n');

        // 2. –ü–∞—Ä—Å–∏–º —Å–∞–π—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
        for (let i = 0; i < companies.length; i++) {
            const company = companies[i];
            console.log(`[${i + 1}/${companies.length}] ${company.name}`);
            
            if (company.url) {
                company.website = await parseCompanyWebsite(company.url);
                console.log(`   –°–∞–π—Ç: ${company.website || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
            } else {
                console.log(`   ‚ùå –ù–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é`);
            }
            
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ —Å–∞–π—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–π
            await delay(1500);
        }

        // 3. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º CSV
        let csvData = '–°—Å—ã–ª–∫–∞;–ù–∞–∑–≤–∞–Ω–∏–µ;–°–∞–π—Ç\n';
        
        companies.forEach(company => {
            // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è CSV
            const escapeCsv = (str) => {
                if (!str) return '';
                if (str.includes(';') || str.includes('"')) {
                    return `"${str.replace(/"/g, '""')}"`;
                }
                return str;
            };

            csvData += `${escapeCsv(company.url)};${escapeCsv(company.name)};${escapeCsv(company.website)}\n`;
        });

        // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        const encodingSuffix = USE_ANSI_ENCODING ? '_ansi' : '_utf8';
        const filename = `exhibitors_companies${encodingSuffix}.csv`;
        
        if (USE_ANSI_ENCODING) {
            const csvBuffer = iconv.encode(csvData, 'win1251');
            fs.writeFileSync(filename, csvBuffer);
        } else {
            fs.writeFileSync(filename, '\uFEFF' + csvData, 'utf8');
        }
        
        console.log(`\n‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª ${filename}`);
        console.log(`üìä –í—Å–µ–≥–æ –∫–æ–º–ø–∞–Ω–∏–π: ${companies.length}`);
        console.log(`üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${Math.round(Buffer.byteLength(csvData) / 1024)} KB`);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∞–π—Ç–∞–º
        const withWebsite = companies.filter(c => c.website).length;
        console.log(`üåê –ö–æ–º–ø–∞–Ω–∏–π —Å —Å–∞–π—Ç–æ–º: ${withWebsite}`);

    } catch (error) {
        console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error.message);
    }
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É
function safeToString(value) {
    if (value === null || value === undefined) {
        return '';
    }
    return String(value).trim();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
parseExhibitors();